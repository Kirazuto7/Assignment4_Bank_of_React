{"version":3,"sources":["components/AccountBalance.js","components/Home.js","components/UserProfile.js","components/Login.js","components/Debits.js","components/Credits.js","App.js","reportWebVitals.js","index.js"],"names":["AccountBalance","this","props","accountBalance","Component","Home","src","alt","to","UserProfile","userName","memberSince","LogIn","handleChange","e","updatedUser","state","user","inputField","target","name","inputValue","value","setState","handleSubmit","preventDefault","mockLogIn","redirect","password","onSubmit","htmlFor","type","onChange","Debits","getCurrentDate","dateFormat","Date","day","String","getDate","padStart","month","getMonth","year","getFullYear","debitsView","debits","map","debit","date","slice","amount","description","id","new_debit","newDebit","newID","now","parseFloat","alert","addDebit","description_input_field","document","getElementById","amount_input_field","resetNewDebit","bind","step","total_debit","Credits","creditsView","console","log","total_credit","credits","credit","new_credit","newCredit","addCredit","resetNewCredit","statenewCredit","App","logInInfo","newUser","currentUser","push","totalBalance","forEach","toFixed","total","componentDidMount","a","credits_api","axios","get","response","data","status","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.6d097510.chunk.js","sourcesContent":["// src/components/AccountBalance.js\n\nimport React, {Component} from 'react';\n\nclass AccountBalance extends Component {\n  render() {\n    return (\n        <div>\n          Balance: {this.props.accountBalance}\n        </div>\n    );\n  }\n}\n\nexport default AccountBalance;","// src/components/Home.js\n// The Home component is used to demonstrate the use of Link.\n\nimport React, {Component} from 'react';\nimport AccountBalance from './AccountBalance';\nimport {Link} from 'react-router-dom';\n\nclass Home extends Component {\n  render() {\n    return (\n        <div>\n          <img src=\"https://picsum.photos/200/200\" alt=\"bank\"/>\n          <h1>Bank of React</h1>\n\n          <Link to=\"/userProfile\">User Profile</Link>\n          <br/>\n          <Link to=\"/login\">Login</Link>\n          <br/>\n          <Link to=\"/credits\">Credits</Link>\n          <br/>\n          <Link to=\"/debits\">Debits</Link>\n          \n          <AccountBalance accountBalance={this.props.accountBalance}/>\n        </div>\n    );\n  }\n}\n\nexport default Home;","// src/components/UserProfile.js\n// The UserProfile component is used to demonstrate the use of Route and Link.\n\nimport React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nclass UserProfile extends Component {\n  render() {\n    return (\n        <div>\n          <h1>User Profile</h1>\n\n          <div>Username: {this.props.userName}</div>\n          <div>Member Since: {this.props.memberSince}</div>\n          \n          <Link to=\"/\">Return to Home</Link>\n        </div>\n    );\n  }\n}\n\nexport default UserProfile;","// src/components/Login.js\n// The LogIn component is used to demonstrate the use of Redirect.\n\nimport React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\n\nclass LogIn extends Component {\n  constructor () {  // Create and initialize state\n    super()\n    this.state = {\n      user: {\n        userName: '',\n        password: ''\n      },\n      redirect: false\n    }\n  }\n\n  // When the user name input is changed, capture the input and update the state (user.userName)\n  handleChange = (e) => {\n    const updatedUser = {...this.state.user}\n    const inputField = e.target.name\n    const inputValue = e.target.value\n    updatedUser[inputField] = inputValue\n\n    this.setState({user: updatedUser})\n  }\n\n  // When user clicked \"Log In\" button, store user data and then redirect to \"User Profile\" page\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.mockLogIn(this.state.user)\n    this.setState({redirect: true})\n  }\n  \n  render () {\n    if (this.state.redirect) {  // Redirect to \"User Profile\" page when \"Log In\" button is clicked\n      return (<Redirect to=\"/userProfile\"/>)\n    }\n    // Render the login form\n    return (\n      <div>\n        <h1>Login</h1>\n\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label htmlFor=\"userName\">User Name</label>\n            <input type=\"text\" name=\"userName\" onChange={this.handleChange} value={this.state.user.userName} />\n          </div>\n          <div>\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" name=\"password\" />\n          </div>\n          <button>Log In</button>\n        </form>                  \n      </div>\n    )\n  }\n}\n\nexport default LogIn","// src/components/Debits.js\n\nimport React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nclass Debits extends Component {\n  constructor(props)\n  {\n    super(props);\n\n    this.state = \n    {\n      newDebit: \n      {\n        id: \"\",\n        description: \"\",\n        amount: 0,\n        date: this.getCurrentDate()\n      }\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  getCurrentDate = () => {\n    // Formatted string containing today's date\n    let dateFormat = new Date();\n    var day = String(dateFormat.getDate()).padStart(2, '0');\n    var month = String(dateFormat.getMonth() + 1).padStart(2, '0'); // Month index starts at 0 eg: Jan = 0, Feb = 1\n    var year = dateFormat.getFullYear();\n    dateFormat = year + '-' + month + '-' + day;\n    return dateFormat;\n  }\n\n  debitsView = () => {\n    return this.props.debits.map((debit) => {\n        let date = debit.date.slice(0,10);\n        return <li key={debit.id}>{debit.amount} {debit.description} {date}</li>\n    }) \n  }\n\n  // When the user inputs the description and amount, the input is captured and the state is updated\n  handleChange = (e) => {\n      let new_debit = {...this.state.newDebit};\n      let inputField = e.target.name;\n      let inputValue = e.target.value;\n      \n      // Generate a random id value\n      let newID = Date.now();\n      new_debit[\"id\"] = newID;\n      \n      if(inputField === \"description\")\n      {\n        new_debit[\"description\"] = inputValue;\n      }\n\n      if(inputField === \"amount\") \n      {\n        new_debit[\"amount\"] = parseFloat(inputValue);\n      }\n\n      this.setState({newDebit: new_debit});\n  }\n\n  // Stores the users debit data and updates the page \n  handleSubmit = (e) => {\n    alert('A new debit was submitted.');\n    e.preventDefault();\n    this.props.addDebit(this.state.newDebit);\n\n    // Clear the input fields\n    let description_input_field = document.getElementById('description');\n    let amount_input_field = document.getElementById('amount');\n    description_input_field.value = '';\n    amount_input_field.value = '';\n\n    this.resetNewDebit();\n  }\n\n  // Resets the current state of newDebit\n  resetNewDebit = () => {\n    let debits = {...this.state.newDebit}\n    debits.description = \"\";\n    debits.amount = 0;\n    debits.id = \"\";\n    debits.date = this.getCurrentDate();\n    this.setState({newDebit: debits});\n  }\n \n  render() {\n    return (\n      <div>\n    \t   <h1>Debits</h1>\n    \t \n           <form onSubmit={this.handleSubmit}>\n             <input id=\"description\" type=\"text\" name=\"description\" onChange={this.handleChange} value={this.state.description}/>\n             <input id=\"amount\" type=\"number\" name=\"amount\" step=\"0.01\" onChange={this.handleChange} value={this.state.amount}/>\n             <button type=\"submit\" >Add Debit</button>\n           </form>\n           <h3>Transaction List: {this.debitsView()}</h3>\n           \n           <h2>Total Amount of Debits: {this.props.total_debit}</h2>\n           <h2>Account Balance: {this.props.accountBalance}</h2>\n           <Link to=\"/\">Home</Link>\n    \t</div>\n    );\n  }\n\n} \n\nexport default Debits;","// src/components/Credits.js\n\nimport React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nclass Credits extends Component {\n  constructor(props)\n  {\n    super(props);\n\n    this.state = \n    {\n      newCredit: \n      {\n        id: \"\",\n        description: \"\",\n        amount: 0,\n        date: this.getCurrentDate()\n      }\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);  \n  }\n\n  getCurrentDate = () => {\n    // Formatted string containing today's date\n    let dateFormat = new Date();\n    var day = String(dateFormat.getDate()).padStart(2, '0');\n    var month = String(dateFormat.getMonth() + 1).padStart(2, '0'); // Month index starts at 0 eg: Jan = 0, Feb = 1\n    var year = dateFormat.getFullYear();\n    dateFormat = year + '-' + month + '-' + day;\n    return dateFormat;\n  }\n\n  creditsView = () => {\n    console.log(this.state.total_credit);\n    return this.props.credits.map((credit) => {\n        let date = credit.date.slice(0,10);\n        return <li key={credit.id}>{credit.amount} {credit.description} {date}</li>\n    }) \n  }\n\n  handleChange = (e) => {\n    let new_credit = {...this.state.newCredit};\n    let inputField = e.target.name;\n    let inputValue = e.target.value;\n\n    //generate a random id\n    let newID = String(Date.now());\n    new_credit[\"id\"] = newID;\n\n    if(inputField === \"description\")\n    {\n      new_credit[\"description\"] = inputValue;\n    }\n\n    if(inputField === \"amount\")\n    {\n      new_credit[\"amount\"] = parseFloat(inputValue);\n    }\n\n    this.setState({newCredit: new_credit});\n  }\n\n  handleSubmit = (e) => {\n    alert('A new credit was submitted.');\n    e.preventDefault();\n    this.props.addCredit(this.state.newCredit);\n\n    let description_input_field = document.getElementById('description');\n    let amount_input_field = document.getElementById('amount');\n    description_input_field.value = '';\n    amount_input_field.value = '';\n\n    this.resetNewCredit();\n  }\n\n  resetNewCredit = () => {\n    let credits = {...this.statenewCredit};\n    credits.description = \"\";\n    credits.amount = 0;\n    credits.id = \"\";\n    credits.date = this.getCurrentDate();\n    this.setState({newCredit: credits});\n  }\n\n \n  render() {\n    return (\n      <div>\n    \t   <h1>Credits</h1>\n    \t \n           <form onSubmit={this.handleSubmit}>\n             <input id=\"description\" type=\"text\" name=\"description\" onChange={this.handleChange} value={this.state.description}/>\n             <input id=\"amount\" type=\"number\" name=\"amount\" step=\"0.01\" onChange={this.handleChange} value={this.state.amount}/>\n             <button type=\"submit\">Add Credit</button>\n           </form>\n           <h3>Transaction List: {this.creditsView()}</h3>\n           \n           <h2>Total Amount of Credits: {this.props.total_credit}</h2>\n           <h2>Account Balance: {this.props.accountBalance}</h2>\n           <Link to=\"/\">Home</Link>\n    \t</div>\n    );\n  }\n\n} \n\nexport default Credits;","// src/App.js\n\nimport React, {Component} from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Home from './components/Home';\nimport UserProfile from './components/UserProfile';\nimport LogIn from './components/Login';\nimport Debits from './components/Debits';\nimport Credits from './components/Credits';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor() {  // Create and initialize state\n    super(); \n    this.state = {  accountBalance: 0,\n                    currentUser: {\n                                    userName: 'Joe Smith',\n                                    memberSince: '07/23/96',\n                                 },\n                    debits: [],\n                    total_debit: 0,\n                    credits: [],\n                    total_credit: 0\n                  }\n  }\n\n  // Update state's currentUser (userName) after \"Log In\" button is clicked\n  mockLogIn = (logInInfo) => {  \n    const newUser = {...this.state.currentUser}\n    newUser.userName = logInInfo.userName\n    this.setState({currentUser: newUser})\n  }\n\n  addCredit = (credit) =>\n  {\n    this.state.credits.push(credit);\n    this.setState({credits: this.state.credits});\n    this.totalBalance();\n  }\n\n  addDebit = (debit) =>\n  {\n    this.state.debits.push(debit);\n    this.setState({debits: this.state.debits});\n    this.totalBalance();\n  }\n\n  totalBalance = () =>\n  {\n    let debits = 0;\n    let credits = 0;\n    this.state.debits.forEach(debit => { debits += debit.amount });\n    this.setState({total_debit: parseFloat(debits.toFixed(2))});\n    this.state.credits.forEach(credit => { credits += credit.amount });\n    this.setState({total_credit: parseFloat(credits.toFixed(2))});\n    let total = credits - debits;\n    this.setState({accountBalance: parseFloat(total.toFixed(2))});\n  }\n\n   //Loads the debit information from the api\n   componentDidMount = async () => \n   {\n    let debits_api = \"https://moj-api.herokuapp.com/debits\";\n    let credits_api = \"https://moj-api.herokuapp.com/credits\";\n    \n    try {\n      let response = await axios.get(debits_api);\n      console.log(response);\n      this.setState({debits: response.data});\n\n      response = await axios.get(credits_api);\n      console.log(response);\n      this.setState({credits: response.data});\n    }\n    catch (error) {\n      if(error.response) {\n        console.log(error.response);\n        console.log(error.response.data);\n        console.log(error.response.status);\n      }\n    }\n    this.totalBalance();\n  }\n\n  // Create Routes and React elements to be rendered using React components\n  render() {  \n    const HomeComponent = () => (<Home accountBalance={this.state.accountBalance}/>);\n    const UserProfileComponent = () => (\n        <UserProfile userName={this.state.currentUser.userName} memberSince={this.state.currentUser.memberSince}  />\n    );\n    const LogInComponent = () => (<LogIn user={this.state.currentUser} mockLogIn={this.mockLogIn} />);  // Pass props to \"LogIn\" component\n    const DebitsComponent = () => (<Debits debits={this.state.debits} accountBalance={this.state.accountBalance} total_debit={this.state.total_debit} addDebit={this.addDebit} />);\n    const CreditsComponent = () => (<Credits credits={this.state.credits} accountBalance={this.state.accountBalance} total_credit={this.state.total_credit} addCredit={this.addCredit} />);\n\n    return (\n        <Router>\n          <div>\n            <Route exact path=\"/\" render={HomeComponent}/>\n            <Route exact path=\"/userProfile\" render={UserProfileComponent}/>\n            <Route exact path=\"/login\" render={LogInComponent}/>\n            <Route exact path=\"/debits\" render={DebitsComponent}/>\n            <Route exact path=\"/credits\" render={CreditsComponent}/>\n          </div>\n        </Router>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}